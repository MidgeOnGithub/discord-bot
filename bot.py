import botcredentials
import discord
import os
from discord.ext import commands

# The bot's command prefix is set here, as well as an informative status to indicate the bot is initialize and is not yet ready
client = commands.Bot(command_prefix = '!', status = discord.Status.idle, activity = discord.Game(name = 'Booting...'))
client.remove_command('help')

# Extensions list to load in cogs, this currently requires manual entry upon creation or name edits
#  Optionally, could use automated processes e.g., one that searches and tries all files in __main__ file's sub-directories
#  In the future, this list needs to be dynamically generated by a user's configuration/settings
extensions = ['bot_management', 'live_role', 'moderation']

# This event triggers once the bot is ready, giving some basic summary info and changing its status accordingly
@client.event
async def on_ready():
    print(f'Now online as {client.user}. Ready to go!')
    print(f'Serving {len(client.guilds)} guilds with a combined {len(client.users)} users!')
    await client.change_presence(status = discord.Status.online, activity = discord.Game(name = 'Active!'))


@client.event
async def on_message(message):
    # Ensure the bot ignores messages from itself, otherwise process them as usual
    if message.author == client.user:
        return
    await client.process_commands(message)


@client.command()
async def user(ctx, target:discord.Member = None):
    # Determine who is the target, set pronouns accordingly
    if target == None:  # If no Target is specified, assume invoking user is the target
        target = ctx.message.author
        p1, p2 = 'Your', 'You'
    elif target.bot:
        p1, p2 = 'Its', 'It'
    else:
        p1, p2 = 'Their', 'They'

    # Determine certain properties and text regarding the user
    displaynick = target.display_name
    username = f'{target.name}#{target.discriminator}'
    join_time = target.joined_at
    r_msg = 'No special roles assigned in this server.'  # Workaround to prevent pinging with @everyone if the target has no given roles
    if len(target.roles) != 1:
        role = target.top_role
        r_msg = f'{p1} top role is {role}.'
    bot_msg = ''
    if target.bot:
        bot_msg = f'\n{displaynick} is a bot.'
        
    # Send the message
    await ctx.channel.send(f'{displaynick}\'s full username is {username}.\n{p2} joined at {join_time}.\n{r_msg}{bot_msg}')


# This file only runs the bot if this file is the "main" which imports the extensions (cogs) when called
#  Thus the code within won't run in the case that any sort of setup.py file which calls this file is implemented
#  This may need reconsidered upon future implementation of settings/setup
if __name__ == '__main__':
    for ext in extensions:
        try:
            # This assumes a relative path to the cogs folder
            client.load_extension('cogs.' + ext)
        except Exception as err:
            print(f'{ext} not loaded. [{err}]')

# This code starts the bot process
client.run(botcredentials.TOKEN)
